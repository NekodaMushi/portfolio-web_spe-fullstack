{
  "transcriptString": "Just before we finished this basic intro to Flexbox part, I wanna quickly show you what happens when we have a whole lot of flex items in a flex container. So right now, we have these five elements, but what happens if we just add another five of these? Okay. So let's get rid of these class names here, of course. And then six, seven, eight, nine... And ten. Okay, so you see that all of these flex items, they are now getting cramped here into this line. And if we decrease this even more, then there's even less and less space available, and at some point they even start overflowing the flex container like this like we saw before, actually. But as you know, there's another property that we can use on the flex container, right? And it is called flex-wrap. So flex-wrap, and its initial value is no-wrap and that's because it's not wrapping into a new line, but if we say wrap like this, then it will create a new line for these flex items that no longer fit the container, and so that's actually happening already. So you see that this item here with the three, so this i3 here which has this flex set to one has now an entire new row for itself. And if we actually decrease this even more, then you'll see that more and more elements come down here to the second row. So basically, the second line that is created here has the flex items start to wrap, okay. And once more, this can be pretty useful for responsive design when we get less and less space to work with in our layouts, right? Now let's again get rid of these huge margins that we have here. So I'm gonna put five pixels here just so that we have a little bit of margin, and so that's what it looks like. Now, let me actually increase the container here, okay. So you see it right now, the container ends here, of course. And that makes sense, but for what I wanna show you next, we need a higher container. So let's increase it. While not that much probably... So let's actually... Like, I dunno, maybe 1000 pixels and so let's see what it looks like, like this. So with all the space, this creates a bunch of different lines here. Actually, I'm not sure about this one here. Let's reload it. Or first, save this actually and then reload it. Alright it still does that. Okay, that looks a bit weird here. It looks like it should be in here. Let's check that one out. And you know, of course, it is just because it sat here to flex-end here, okay. So that's the only reason why it's down here. It's actually on the same row as this one. Let's just change this one here, or simply get rid of it. So that's the same effect. So, what happens here is that we have two rows. Basically, so first this one and then this one. Now why is all of this space here between these rows? So this and this one. Well, that's because of the align-content property that I didn't show you yet. And so, I'm gonna show it to you right now. And that's one of these, that's once again, set here on the flex container. So align-content and let's set it to flex-start. Okay and so now all of these rows move up. Okay and that is because what the align-content property does is that it aligns the rows along the cross axis. So it's pretty similar to align-items with the difference that align-items aligns the flex items as the name actually says, and align-content aligns entire, let's say rows, along the cross-axis, right? And so now, as we set flex-start here, both these rows are now here at the beginning, and then all of the space down here is empty, right? Now we can also set it to flex-end just to demonstrate you that, and so both rows basically moved down here. Okay. Let me decrease this a bit here so that the last row doesn't have only this one element. Okay. And so let's, actually try another one here. So, center, which is also pretty useful. And so now, as you can guess, the space here, up here is the same as the one down here because these two rows are now centered inside the flex container along the cross axis. So basically, vertically, right? Now this is a bit difficult to visualize here because we don't have a lot of space here, okay. We just increase this a little bit more. Okay. Now there's also space around just as we have in justify-content. So it's the same logic. And this is what it looks like. So basically, it distributes the space between the rows so that the space on the bottom and on top of each of the rows is the same. Okay, so just like with justify-content. Then we also have space between which will push one of the lines to the top of the element and the other one to the bottom, okay. And then finally, stretch which is actually the default. So the initial value. Now the stretch here doesn't really stretch all of these elements like it does in align-items, okay. It just stretches the rows which is not really visible. So this is pretty similar to like space-between, okay. So, align-content is the last property that I wanted to show you. And again, it controls how the rows are aligned along the cross axis similar to align-items and that is actually it. So that's all I had to show you here in this very basic introduction about Flexbox. So now you know the very, very fundamentals of Flexbox so that you are ready to move on to the project that we are about to start in the next lecture. So, are you excited about that? Then don't wait and join me right in the next lecture. See ya there.",
  "videoTitle": "71. A Basic Intro to Flexbox: Adding More Flex Items"
}