{
  "transcriptString": "All right, let's now finish the header in this third part. So we formatted the logo, we formatted the search bar, now it's time to format the user navigation. And the first thing we have to do is to put these three elements, so this one, this one, and this one here all side by side. And so what's better than using flex box for that, right? So down here, we have the user navigation, and so we're gonna set display to flex to turn this into a flex container. And so once again we have the situation that we had with the search bar before, where a flex item is also at the same time a flex container. And that is completely normal, it's no problem to do that. And it's actually pretty common, as you will see throughout the rest of the project. We're gonna do that all the time. So display flex, and this is what it looks like. Now the next step is to vertically center these elements here, right? So along the cross axis. And so we use align items, set to center. And so that's what we get, and that's much better. So what can we do next? Well let's take a look at this here, and so the next thing that I wanna do is to apply the spacing here. Oh, what's going on here. Let's reload it. Ah, right. So the next thing that I wanna do is to give it this spacing here between these boxes and then also this gray background color on hover, right? So let's very quickly implement that. So where we want the space to happen is basically on the user-nav-icon-box and this one and the user, so these two classes. Now we could go ahead and group them, so make a selector for icon box and user at the same time, but I'm simply gonna do it like this. So the user nav and then all of the direct children. And that will have the exact same effect, right? Because we only select the direct children, which is what that selector here does. So all we do is to select this element, this element, and this one. That's exactly what I was saying before, right? So first some padding, and we want zero on the top and two on the left and right, so 2 rem. And we want it to have a cursor in the form of a pointer. So I don't know if you saw that in the demo, and now let's take care of that background. So we select all of them again, but this time on hover, and what we want to happen is the background color set to our gray light two color. So let's copy that from here because it's a lot of code to type out. So this one here. Now that's not gonna work as expected, but I'm going to show it to you why. So this is the gray hover for this icon box, for this icon box, and then for the user. So the height of this entire navigation bar here is given by the height of this element here, right? But that's not really what we want. We want this nav bar to fill this entire space all the way from the beginning of the header to the end. So how can we actually achieve that? And there's one great flex box property for that, which I showed you before, and it's called align-self. So this is like align-items, but for one individual flex item, right? So align-self, and we want this one set to stretch. Okay, so remember that in the header here we set the align-items to center. And that's why the three elements, the logo, the search bar, and the user nav, are vertically centered. But in fact we don't want the nav bar to be vertically centered. And so we override the align-items here with align-self, setting it to stretch, which will then produce this result. Okay and so that's much better. Now all we have to do to fix the fact that this hovering here is not going all the way from the top to the bottom is to then set the height of all of these elements to 100%. So let's check it out now. And so here we go, now it's hovering the entire area, okay? And so that is the power of align-self. Now what's happening here, of course, is that this icon and this text is all the way at the top of its parent element. That's completely normal, but we should fix that. It should obviously be centered here vertically, right? And I'm sure that by now you can guess how we're gonna do that. So flex box to the rescue. So let's go to the icon box, display, flex, and then align-items, set to center. So once more remember that align-items aligns the flex items along the cross axis, and so usually vertically. And that's exactly what we want. So we want to center it vertically, so we use align-items. And so now you see that we are already at the third level of flex containers, right? So that actually works. So the header is a flex container, then the nav bar here, all of this element is a flex container, and now the icon box itself is a flex container as well. So we're already at the third level of flex containers. And once more, that's no problem, that is absolutely okay, that is just how flex box works really. And actually, since we're doing this, we should actually do the same thing here with the user, right? So all of this should also be vertically centered. And so instead of putting it here in the icon box where we put it, we can actually put it here so that we do it to all of the direct children. So the two icon boxes as well as the user, okay? And so that is much better. So all of these three are now effectively flex containers as well. All right, so let's now take care of these icons here. So changing the color, and then formatting the notification here as well. So as for the icon, we already have its height and its width, now let's also take care of the color of the icon. So once again,let's use the fill property, setting it to a dark gray. So the same one as well, where is it? Actually it's not here anywhere. So let's just copy this here, and then change it. So color-gray-dark-2, okay? So that's this one, so #777. So that's the color, now let's format the notification here. So it should have a font size of .8 rem, so really small. Then a height of 1.75 and a width as well of .75 rem, so point 75, and here the same. And then a border-radius set to 50%. And actually here it's 1.75, so such as I had it in the beginning. So 1.75 rem. Then the background color should be our primary pink color. So that's our primary color, and then the text in there should be white. And so I'm just gonna use #fff here again, and so let's take a look at that. And that looks pretty good already. Now we have to actually position this element here on top of the icon, right? And so the best way of that is this time not using flex box. So flex box doesn't really give us a way to perfectly position an element exactly where we want it, but isntead we're just gonna use absolute positioning here, okay? So let's do that. So position absolute, and then remember that the parent element should be set to position relative. So position relative here. And now let's say we want it on the top like zero, and from the right like one rem. Just to experiment with this. And somehow it's gone, I see it's up here now, and I'm not really sure why that is. So I guess maybe it's best to remove this position relative from here, and put it here. So maybe it doesn't work that well on an SVG element, which the icon is in fact. And so let's just put it on the icon box. And so yeah, that works much better. Now we just have to move it down a little bit. So top like 1.5 rem. All right, here we go. Now just maybe a bit more to the left side, so increase it here, so 1.1 rem, but that should be perfect already. Now let's just get rid of this background color here, it looks kind of silly by now, and yeah, so that's great. Now all we have to do is to like center this text in here, both horizontally and vertically. And so let me tell you another secret, let's say, which is that we can actually use flex box for that as well. So flex box doesn't only work when we have child elements, but it works with text as well. So display flex, and now we simply have to say justify-content, center, which centers the content horizontally, and align-items also to center, which is gonna center it vertically. So let's take a look at that, and in fact you see that it works. So in this case you actually have now four levels of flex box, one inside of another. Now what you see here maybe is this is not really a circle here, and I think that's because this text, so this text here is larger than this one. You see this one is like a perfect circle, but this one is not. So I think we shouldn't use border radius of 50% here, but instead just like a very high number, so just as we did before here on this part, and actually it looks the exact same way. But never mind, this is really not a problem, all right? Now all we have to do is give it some space here on this user photo, and then, I think, we are good to go. So the user photo, margin-left, and let's say 1 rem, and actually we don't really need to format this user here, because we already did it up here with this selector where we selected all of the elements at once and user name also doesn't really need to be selected, because there's no style applying to it, okay? Let's actually set this here back to 50%, because that's a cleaner solution, and so with that I think that this is ready. Well something here is not right, and the, of course it's not margin-left, it's margin-right. Okay, now this here looks like it has a lot more space here on this side than it has here, so it's not really symmetric, so let's change that one very quickly. So to 2 rem, and okay. So our hover here is also working, let's compare it with this one here, and you see it actually is exactly the same. And so it's perfect. All right, so I hope that these first couple of lectures were really helpful for you to start grasping the concepts that are behind flex box, and the different properties that we can use to align different elements in different situations like the ones that I showed you up until this point. Now there's a lot more content to come, and a lot more flex box to use, so stay tuned for all of these lectures that are to follow. See you next time.",
  "videoTitle": "77. Building the Header - Part 3"
}